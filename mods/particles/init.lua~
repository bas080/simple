------------- Settings --------------
BLOCK_BREAK_PARTICLES = 7
-------------------------------------
SMOKE = {
    physical = true,
    collisionbox = {-0.1,-0.1,-0.1,0,0,0},
    visual = "sprite",
    textures = {"smoke.png"},
    on_step = function(self, dtime)
        self.object:setacceleration({x=0, y=0.5, z=0})
        self.timer = self.timer + dtime
        if self.timer > 3 then
            self.object:remove()
        end
    end,
    timer = 0,
}

minetest.register_entity("particles:smoke", SMOKE)
minetest.register_abm({
	nodenames = {"default:torch"},
	interval = 10,
	chance = 10,
	action = function(pos)
		minetest.env:add_entity({x=pos.x+math.random()*0.5,y=pos.y-0.25,z=pos.z+math.random()*0.5}, "particles:smoke")
	end,
})

if minetest.get_modpath("jeija") ~= nil then -- Mesecons is installed
    MESECONDUST = {
        physical = true,
        collisionbox = {-0.1,-0.1,-0.1,0,0,0},
        visual = "sprite",
        textures = {"mesecondust.png"},
        on_step = function(self, dtime)
            self.timer = self.timer + dtime
            if self.timer > 2.5 then
                self.object:remove()
            end
        end,
        timer = 0,
    }
    minetest.register_entity("particles:mesecondust", MESECONDUST)
    minetest.register_abm({
        nodenames = {"jeija:mesecon_on","jeija:wall_lever_on","jeija:mesecon_torch_on"},
        interval = 1,
        chance = 5,
        action = function(pos)
            minetest.env:add_entity({x=pos.x+math.random()*0.5,y=pos.y,z=pos.z+math.random()*0.5}, "particles:mesecondust")
        end,
    })
end

nodename2color = {
--Brown
{"default:dirt","brown"},
{"default:chest","brown"},
{"default:chest_locked","brown"},
{"default:wood","brown"},
{"default:tree","brown"},
{"default:jungletree","brown"},
{"default:bookshelf","brown"},
{"default:sign_wall","brown"},
{"default:ladder","brown"},
{"default:fence_wood","brown"},
--Red
{"default:apple","red"},
{"default:brick","red"},
--Green
{"default:cactus","green"},
{"default:junglegrass","green"},
{"default:dirt_with_grass","green"},
{"default:sapling","green"},
{"default:papyrus","green"},
{"default:leaves","green"},
--Gray
{"default:clay","gray"},
{"default:cobble","gray"},
{"default:furnace","gray"},
{"default:stone","gray"},
{"default:stone_with_iron","gray"},
{"default:steelblock","gray"},
{"default:rail","gray"},
{"default:mossycobble","gray"},
--Yellow
{"default:mese","yellow"},
{"default:torch","yellow"},
--Sandcolor
{"default:sand","sandcolor"},
{"default:sandstone","sandcolor"},
--Black
{"default:gravel","black"},
{"default:stone_with_coal","black"},
--White
{"default:cloud","white"},
{"default:glass","white"},
}

reg_colors = {}

for idx, tbl in pairs(nodename2color) do
    nn = tbl[1]
    color = tbl[2]
    if reg_colors[color] == nil then
        local TEMP = {
            physical = true,
            collisionbox = {-0.1,-0.1,-0.1,0,0,0},
            visual = "sprite",
            textures = {"p_"..color..".png"},
            timer = 0,
            on_step = function(self, dtime)
                self.timer = self.timer + dtime
                if self.timer > 1 then
                    self.object:remove()
                end
            end,
            on_activate = function(self, staticdata)
                self.object:setacceleration({x=0, y=-7.5, z=0})
            end,
        }
        minetest.register_entity("particles:p_"..color, TEMP)
        reg_colors[color] = true
    end
    func,err = loadstring("\
    minetest.register_on_dignode(function(pos, oldnode, digger)  \n\
        if oldnode.name == '"..nn.."' then  \n\
            for x = 1,"..BLOCK_BREAK_PARTICLES..",1 do  \n\
                e = minetest.env:add_entity({x=(pos.x-0.5)+1-(math.random()*2),y=pos.y+0.25,z=(pos.z-0.5)+1-(math.random()*2)}, 'particles:p_"..color.."')  \n\
                e:setvelocity({x=math.random(),y=1,z=math.random()})  \n\
            end  \n\
        end \n\
    end)  \n")
    if func == nil then
        print("[Particles] ERROR: color="..color.." nn="..nn.." err='"..err.."'")
        local n = function()
            return nil
        end
        n()() -- Prevent Minetest from Starting (call nil)
    else
        func()
    end
end
